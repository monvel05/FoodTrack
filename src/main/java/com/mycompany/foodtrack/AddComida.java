/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.foodtrack;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author monyv
 */
public class AddComida extends javax.swing.JFrame {

    /**
     * Creates new form AddComida
     */
    public AddComida() {
        initComponents();
        SwingUtilities.invokeLater(() -> {
            checarApariencia();
            llenarTabla(); // Carga los datos despu√©s de mostrar la interfaz
            verificarConsumoCalorico();
            iniciarListeners();
            
        });
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        menuPanel = new javax.swing.JPanel();
        addComidaBtn = new javax.swing.JButton();
        listaComprasBtn = new javax.swing.JButton();
        estadisticasBtn = new javax.swing.JButton();
        perfilBtn = new javax.swing.JButton();
        salirBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        titulo = new javax.swing.JLabel();
        busqueda = new javax.swing.JTextField();
        botonBusqueda = new javax.swing.JButton();
        a√±adirAlimentoBtn = new javax.swing.JButton();
        a√±adirAlRegistroBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaAlimentos = new javax.swing.JTable();
        borrarBusqueda = new javax.swing.JButton();
        borrarSeleccionBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(254, 244, 192));
        setPreferredSize(new java.awt.Dimension(800, 500));

        jPanel2.setBackground(new java.awt.Color(254, 244, 192));

        menuPanel.setBackground(new java.awt.Color(253, 140, 13));
        menuPanel.setMaximumSize(new java.awt.Dimension(4, 4));
        menuPanel.setMinimumSize(new java.awt.Dimension(4, 4));
        menuPanel.setPreferredSize(new java.awt.Dimension(130, 25));

        addComidaBtn.setBackground(new java.awt.Color(246, 226, 155));
        addComidaBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/foodtrack/Resources/addComidaIcon.png"))); // NOI18N
        addComidaBtn.setToolTipText("A√±adir comida");
        addComidaBtn.setPreferredSize(new java.awt.Dimension(80, 60));
        addComidaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addComidaBtnActionPerformed(evt);
            }
        });

        listaComprasBtn.setBackground(new java.awt.Color(246, 226, 155));
        listaComprasBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/foodtrack/Resources/listaComprasIcon.png"))); // NOI18N
        listaComprasBtn.setToolTipText("Lista de Compras");
        listaComprasBtn.setPreferredSize(new java.awt.Dimension(80, 60));
        listaComprasBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaComprasBtnActionPerformed(evt);
            }
        });

        estadisticasBtn.setBackground(new java.awt.Color(246, 226, 155));
        estadisticasBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/foodtrack/Resources/estadisticasIcon.png"))); // NOI18N
        estadisticasBtn.setToolTipText("Estad√≠siticas");
        estadisticasBtn.setPreferredSize(new java.awt.Dimension(80, 60));
        estadisticasBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                estadisticasBtnActionPerformed(evt);
            }
        });

        perfilBtn.setBackground(new java.awt.Color(246, 226, 155));
        perfilBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/foodtrack/Resources/perfilIcon.png"))); // NOI18N
        perfilBtn.setToolTipText("Perfil");
        perfilBtn.setPreferredSize(new java.awt.Dimension(80, 60));
        perfilBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                perfilBtnActionPerformed(evt);
            }
        });

        salirBtn.setBackground(new java.awt.Color(246, 226, 155));
        salirBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/foodtrack/Resources/salirIcon.png"))); // NOI18N
        salirBtn.setToolTipText("Salir");
        salirBtn.setMaximumSize(new java.awt.Dimension(50, 30));
        salirBtn.setPreferredSize(new java.awt.Dimension(50, 40));
        salirBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirBtnActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/foodtrack/Resources/logo_blanco.png"))); // NOI18N
        jLabel1.setText("jLabel1");

        javax.swing.GroupLayout menuPanelLayout = new javax.swing.GroupLayout(menuPanel);
        menuPanel.setLayout(menuPanelLayout);
        menuPanelLayout.setHorizontalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(perfilBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                    .addComponent(estadisticasBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, menuPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(salirBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(listaComprasBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addComidaBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        menuPanelLayout.setVerticalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, menuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addComidaBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listaComprasBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(estadisticasBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(perfilBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(salirBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        titulo.setText("Buscar comida / alimento");
        titulo.setPreferredSize(new java.awt.Dimension(150, 30));

        botonBusqueda.setBackground(new java.awt.Color(255, 153, 0));
        botonBusqueda.setText("Buscar üîçÔ∏é");
        botonBusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBusquedaActionPerformed(evt);
            }
        });

        a√±adirAlimentoBtn.setBackground(new java.awt.Color(253, 140, 13));
        a√±adirAlimentoBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/foodtrack/Resources/a√±adirNuevoAlimIcon.png"))); // NOI18N
        a√±adirAlimentoBtn.setToolTipText("A√±adir nuevo alimento");
        a√±adirAlimentoBtn.setActionCommand("A√±adir nuevo alimento üû•");
        a√±adirAlimentoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a√±adirAlimentoBtnActionPerformed(evt);
            }
        });

        a√±adirAlRegistroBtn.setBackground(new java.awt.Color(253, 140, 13));
        a√±adirAlRegistroBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/foodtrack/Resources/agregarRegistroIcon.png"))); // NOI18N
        a√±adirAlRegistroBtn.setToolTipText("A√±adir al registro ");
        a√±adirAlRegistroBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                a√±adirAlRegistroBtnActionPerformed(evt);
            }
        });

        tablaAlimentos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Nombre", "Calor√≠as"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaAlimentos.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tablaAlimentos.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jScrollPane1.setViewportView(tablaAlimentos);

        borrarBusqueda.setBackground(new java.awt.Color(255, 153, 0));
        borrarBusqueda.setText("Borrar ‚úò");
        borrarBusqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarBusquedaActionPerformed(evt);
            }
        });

        borrarSeleccionBtn.setBackground(new java.awt.Color(253, 140, 13));
        borrarSeleccionBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/foodtrack/Resources/borrarSeleccionIcon.png"))); // NOI18N
        borrarSeleccionBtn.setToolTipText("Borrar Selecciones");
        borrarSeleccionBtn.setAutoscrolls(true);
        borrarSeleccionBtn.setPreferredSize(new java.awt.Dimension(124, 27));
        borrarSeleccionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrarSeleccionBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(menuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(titulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(busqueda, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(a√±adirAlimentoBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(borrarBusqueda))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonBusqueda)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(borrarSeleccionBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(a√±adirAlRegistroBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(menuPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(a√±adirAlimentoBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(a√±adirAlRegistroBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(borrarSeleccionBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(busqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonBusqueda)
                            .addComponent(borrarBusqueda))))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addComidaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addComidaBtnActionPerformed
       AddComida miAddComida = new AddComida();
        miAddComida.setVisible(true);
        dispose();
        
// TODO add your handling code here:
    }//GEN-LAST:event_addComidaBtnActionPerformed

    private void a√±adirAlimentoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_a√±adirAlimentoBtnActionPerformed
        // TODO add your handling code here:
        AgregarAlimento agregar = new AgregarAlimento();
        agregar.setVisible(true);
        
    }//GEN-LAST:event_a√±adirAlimentoBtnActionPerformed

    private void a√±adirAlRegistroBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_a√±adirAlRegistroBtnActionPerformed
        // TODO add your handling code here:
        try {
            List<AlimentoTabla> alimentosSeleccionados = obtenerAlimentosSeleccionados();
            if (alimentosSeleccionados.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Seleccione al menos un alimento",
                        "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }

            int idConsumo = verificarConsumoCalorico();
            if (idConsumo == -1) {
                throw new Exception("No se pudo obtener o crear el registro de consumo");
            }

            int caloriasTotales = PeticionesDB.traerCaloriasConsumo(idConsumo);
            int alimentosRegistrados = 0;

            for (AlimentoTabla alimento : alimentosSeleccionados) {
                int idAlimento = PeticionesDB.obtenerIdAlimento(alimento.getNombre());
                if (idAlimento == -1) {
                    throw new Exception("No se encontr√≥ el alimento: " + alimento.getNombre());
                }

                if (PeticionesDB.agregarRegistroConsumo(idAlimento, idConsumo)) {
                    alimentosRegistrados++;
                    caloriasTotales += alimento.getCalorias();
                }
            }

            if (alimentosRegistrados > 0) {
                if (PeticionesDB.actualizarCaloriasConsumidas(idConsumo, caloriasTotales)) {
                    JOptionPane.showMessageDialog(this,
                            alimentosRegistrados + " alimentos registrados exitosamente",
                            "√âxito", JOptionPane.INFORMATION_MESSAGE);
                    limpiarSelecciones();
                } else {
                    throw new Exception("Error al actualizar las calor√≠as totales");
                }
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_a√±adirAlRegistroBtnActionPerformed

    private void estadisticasBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_estadisticasBtnActionPerformed
        // TODO add your handling code here:
        Estadisticas miEstadisticas= new Estadisticas();
        miEstadisticas.setVisible(true);
        dispose(); 
    }//GEN-LAST:event_estadisticasBtnActionPerformed

    private void listaComprasBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaComprasBtnActionPerformed
        // TODO add your handling code here:
        ListaCompras miListaCompras = new ListaCompras();
        miListaCompras.setVisible(true);
        dispose();
    }//GEN-LAST:event_listaComprasBtnActionPerformed

    private void perfilBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_perfilBtnActionPerformed
        // TODO add your handling code here:
        Perfil miPerfil = new Perfil();
        miPerfil.setVisible(true);
        dispose();
    }//GEN-LAST:event_perfilBtnActionPerformed

    private void salirBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirBtnActionPerformed
        // TODO add your handling code here:
        dispose();
        DataBase.desconectar();
    }//GEN-LAST:event_salirBtnActionPerformed

    private void botonBusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBusquedaActionPerformed
        // TODO add your handling code here:
        String textoBusqueda = busqueda.getText().trim();

        if (textoBusqueda.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese un t√©rmino de b√∫squeda",
                    "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            // Obtener alimentos filtrados
            List<AlimentoTabla> alimentosFiltrados = PeticionesDB.buscarAlimentos(textoBusqueda);

            // Crear modelo de tabla
            DefaultTableModel model = new DefaultTableModel(
                    new Object[][]{},
                    new String[]{"Seleccionar", "Nombre", "Calor√≠as"}
            ) {
                @Override
                public Class<?> getColumnClass(int columnIndex) {
                    return columnIndex == 0 ? Boolean.class : String.class;
                }

                @Override
                public boolean isCellEditable(int row, int column) {
                    return column == 0;
                }
            };

            // Llenar la tabla con los resultados existentes
            for (AlimentoTabla alimento : alimentosFiltrados) {
                model.addRow(new Object[]{
                    false,
                    alimento.getNombre(),
                    alimento.getCalorias()
                });
            }

            // Asignar modelo a la tabla
            tablaAlimentos.setModel(model);

            // Configurar renderizado de checkboxes
            tablaAlimentos.getColumn("Seleccionar").setCellRenderer(
                    tablaAlimentos.getDefaultRenderer(Boolean.class));
            tablaAlimentos.getColumn("Seleccionar").setCellEditor(
                    tablaAlimentos.getDefaultEditor(Boolean.class));

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al buscar alimentos: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
            e.getMessage();
        }
    }//GEN-LAST:event_botonBusquedaActionPerformed

    private void borrarBusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarBusquedaActionPerformed
        // TODO add your handling code here:
        List<AlimentoTabla> seleccionesActuales = obtenerAlimentosSeleccionados();

        // 2. Limpiar el campo y recargar la tabla
        busqueda.setText("");
        llenarTabla();

        // 3. Restaurar las selecciones
        if (!seleccionesActuales.isEmpty()) {
            DefaultTableModel model = (DefaultTableModel) tablaAlimentos.getModel();

            for (int i = 0; i < model.getRowCount(); i++) {
                String nombre = (String) model.getValueAt(i, 1);
                // Verificar si este alimento estaba seleccionado
                for (AlimentoTabla alimento : seleccionesActuales) {
                    if (alimento.getNombre().equals(nombre)) {
                        model.setValueAt(true, i, 0);
                        break;
                    }
                }
            }
        }
    }//GEN-LAST:event_borrarBusquedaActionPerformed

    private void borrarSeleccionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrarSeleccionBtnActionPerformed
        // TODO add your handling code here:
        limpiarSelecciones();
    }//GEN-LAST:event_borrarSeleccionBtnActionPerformed

    public void llenarTabla() {
        try {
            // 1. Obtener los datos
            List<AlimentoTabla> alimentos = PeticionesDB.obtenerAlimentosParaTabla();

            // 2. Crear el modelo de tabla con las columnas primero
            DefaultTableModel model = new DefaultTableModel(
                    new Object[][]{}, // Datos vac√≠os inicialmente
                    new String[]{"Seleccionar", "Nombre", "Calor√≠as"} // Nombres de columnas
            ) {
                @Override
                public Class<?> getColumnClass(int columnIndex) {
                    return columnIndex == 0 ? Boolean.class : String.class;
                }

                @Override
                public boolean isCellEditable(int row, int column) {
                    return column == 0;
                }
            };

            // 3. Llenar el modelo con los datos
            for (AlimentoTabla alimento : alimentos) {
                model.addRow(new Object[]{
                    false, // Checkbox inicial desmarcado
                    alimento.getNombre(),
                    alimento.getCalorias()
                });
            }

            // 4. Asignar el modelo a la JTable
            tablaAlimentos.setModel(model);

            // 5. Configurar el renderizado de checkboxes
            tablaAlimentos.getColumn("Seleccionar").setCellRenderer(tablaAlimentos.getDefaultRenderer(Boolean.class));
            tablaAlimentos.getColumn("Seleccionar").setCellEditor(tablaAlimentos.getDefaultEditor(Boolean.class));

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al llenar la tabla: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
            e.getMessage();
        }
    }
    
    public int verificarConsumoCalorico() {
        try {
            LocalDate fecha = LocalDate.now();
            int idUsuario = UsuarioId.getInstance().getValor();
            int consumoActivo = PeticionesDB.buscarConsumoCalorico(fecha, idUsuario);

            if (consumoActivo == -1) {
                if (!PeticionesDB.agregarConsumoCalorico(fecha, idUsuario)) {
                    throw new RuntimeException("No se pudo crear el registro de consumo");
                }
                // Obtener el ID del nuevo registro creado
                consumoActivo = PeticionesDB.buscarConsumoCalorico(fecha, idUsuario);
                System.out.println("Nuevo registro de consumo creado. ID: " + consumoActivo);
            } else {
                System.out.println("Registro de consumo existente. ID: " + consumoActivo);
            }
            return consumoActivo;
        } catch (RuntimeException e) {
            throw new RuntimeException("Error al verificar consumo cal√≥rico: " + e.getMessage());
        }
    }
    
    public void iniciarListeners() {
        botonBusqueda.addActionListener((java.awt.event.ActionEvent evt1) -> {
            botonBusquedaActionPerformed(evt1);
        });
        //Listener para el bot√≥n de borrar y que elimine el contenido del jtextfield
        borrarBusqueda.addActionListener((java.awt.event.ActionEvent evt) -> {
            borrarBusquedaActionPerformed(evt);
        });
    }
    
    private List<AlimentoTabla> obtenerAlimentosSeleccionados() {
        List<AlimentoTabla> seleccionados = new ArrayList<>();
        DefaultTableModel model = (DefaultTableModel) tablaAlimentos.getModel();

        for (int i = 0; i < model.getRowCount(); i++) {
            Boolean seleccionado = (Boolean) model.getValueAt(i, 0);
            if (seleccionado != null && seleccionado) {
                String nombre = (String) model.getValueAt(i, 1);
                Integer calorias = (Integer) model.getValueAt(i, 2);
                seleccionados.add(new AlimentoTabla(nombre, calorias));
            }
        }
        return seleccionados;
    }

    private void limpiarSelecciones() {
        DefaultTableModel model = (DefaultTableModel) tablaAlimentos.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            model.setValueAt(false, i, 0);
        }
    }
    
    private void checarApariencia() {
        if (ModoOscuro.getInstance().isModoOscuroActivo()) {
            //Cambiar men√∫
            menuPanel.setBackground(ModoOscuro.getInstance().getColorFuerteOscuro());
            addComidaBtn.setBackground(ModoOscuro.getInstance().getBotonesOscuro());
            addComidaBtn.setForeground(ModoOscuro.getInstance().getFuenteOscuro());
            listaComprasBtn.setBackground(ModoOscuro.getInstance().getBotonesOscuro());
            listaComprasBtn.setForeground(ModoOscuro.getInstance().getFuenteOscuro());
            estadisticasBtn.setBackground(ModoOscuro.getInstance().getBotonesOscuro());
            estadisticasBtn.setForeground(ModoOscuro.getInstance().getFuenteOscuro());
            perfilBtn.setBackground(ModoOscuro.getInstance().getBotonesOscuro());
            perfilBtn.setForeground(ModoOscuro.getInstance().getFuenteOscuro());
            salirBtn.setBackground(ModoOscuro.getInstance().getBotonesOscuro());
            salirBtn.setForeground(ModoOscuro.getInstance().getFuenteOscuro());
            
            //Cambiar panel
            jPanel2.setBackground(ModoOscuro.getInstance().getFondoOscuro());
            
            //Cambiar labels
            titulo.setForeground(ModoOscuro.getInstance().getFuenteOscuro());
            
            //Cambiar botones
            borrarBusqueda.setBackground(ModoOscuro.getInstance().getColorFuerteOscuro());
            borrarBusqueda.setForeground(ModoOscuro.getInstance().getFuenteOscuro());
            botonBusqueda.setBackground(ModoOscuro.getInstance().getColorFuerteOscuro());
            botonBusqueda.setForeground(ModoOscuro.getInstance().getFuenteOscuro());
            a√±adirAlimentoBtn.setBackground(ModoOscuro.getInstance().getColorFuerteOscuro());
            a√±adirAlimentoBtn.setForeground(ModoOscuro.getInstance().getFuenteOscuro());
            borrarSeleccionBtn.setBackground(ModoOscuro.getInstance().getColorFuerteOscuro());
            borrarSeleccionBtn.setForeground(ModoOscuro.getInstance().getFuenteOscuro());
            a√±adirAlRegistroBtn.setBackground(ModoOscuro.getInstance().getColorFuerteOscuro());
            a√±adirAlRegistroBtn.setForeground(ModoOscuro.getInstance().getFuenteOscuro());
        } else {
            menuPanel.setBackground(ModoOscuro.getInstance().getColorFuerteClaro());
            addComidaBtn.setBackground(ModoOscuro.getInstance().getBotonesClaro());
            addComidaBtn.setForeground(ModoOscuro.getInstance().getFuenteClaro());
            listaComprasBtn.setBackground(ModoOscuro.getInstance().getBotonesClaro());
            listaComprasBtn.setForeground(ModoOscuro.getInstance().getFuenteClaro());
            estadisticasBtn.setBackground(ModoOscuro.getInstance().getBotonesClaro());
            estadisticasBtn.setForeground(ModoOscuro.getInstance().getFuenteClaro());
            perfilBtn.setBackground(ModoOscuro.getInstance().getBotonesClaro());
            perfilBtn.setForeground(ModoOscuro.getInstance().getFuenteClaro());
            salirBtn.setBackground(ModoOscuro.getInstance().getBotonesClaro());
            salirBtn.setForeground(ModoOscuro.getInstance().getFuenteClaro());
            
            //Cambiar panel
            jPanel2.setBackground(ModoOscuro.getInstance().getFondoClaro());
            
            //Cambiar labels
            titulo.setForeground(ModoOscuro.getInstance().getFuenteClaro());
            
            //Cambiar botones
            borrarBusqueda.setBackground(ModoOscuro.getInstance().getColorFuerteClaro());
            borrarBusqueda.setForeground(ModoOscuro.getInstance().getFuenteClaro());
            botonBusqueda.setBackground(ModoOscuro.getInstance().getColorFuerteClaro());
            botonBusqueda.setForeground(ModoOscuro.getInstance().getFuenteClaro());
            a√±adirAlimentoBtn.setBackground(ModoOscuro.getInstance().getColorFuerteClaro());
            a√±adirAlimentoBtn.setForeground(ModoOscuro.getInstance().getFuenteClaro());
            borrarSeleccionBtn.setBackground(ModoOscuro.getInstance().getColorFuerteClaro());
            borrarSeleccionBtn.setForeground(ModoOscuro.getInstance().getFuenteClaro());
            a√±adirAlRegistroBtn.setBackground(ModoOscuro.getInstance().getColorFuerteClaro());
            a√±adirAlRegistroBtn.setForeground(ModoOscuro.getInstance().getFuenteClaro());
        }
    }
    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addComidaBtn;
    private javax.swing.JButton a√±adirAlRegistroBtn;
    private javax.swing.JButton a√±adirAlimentoBtn;
    private javax.swing.JButton borrarBusqueda;
    private javax.swing.JButton borrarSeleccionBtn;
    private javax.swing.JButton botonBusqueda;
    private javax.swing.JTextField busqueda;
    private javax.swing.JButton estadisticasBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton listaComprasBtn;
    private javax.swing.JPanel menuPanel;
    private javax.swing.JButton perfilBtn;
    private javax.swing.JButton salirBtn;
    private javax.swing.JTable tablaAlimentos;
    private javax.swing.JLabel titulo;
    // End of variables declaration//GEN-END:variables
}

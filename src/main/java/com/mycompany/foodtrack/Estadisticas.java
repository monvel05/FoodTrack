/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.foodtrack;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.time.LocalDate;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.DefaultPieDataset;


/**
 *
 * @author monyv
 */
public class Estadisticas extends javax.swing.JFrame {

    /**
     * Creates new form Estadisticas
     */
    public Estadisticas() {
        initComponents();
        SwingUtilities.invokeLater(() -> {
            checarApariencia();
            traerDatosMeta();
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        comboTipoMeta = new javax.swing.JComboBox<>();
        panelGrafica = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        consumo_caloricoInput = new javax.swing.JTextField();
        meta_actualInput = new javax.swing.JTextField();
        graficaBtn = new javax.swing.JButton();
        nuevaMetaBtn = new javax.swing.JButton();
        actualizarMetaBtn = new javax.swing.JButton();
        menuPanel = new javax.swing.JPanel();
        addComidaBtn = new javax.swing.JButton();
        listaComprasBtn = new javax.swing.JButton();
        estadisticasBtn = new javax.swing.JButton();
        perfilBtn = new javax.swing.JButton();
        salirBtn = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(252, 244, 192));
        jPanel1.setPreferredSize(new java.awt.Dimension(800, 500));

        comboTipoMeta.setBackground(new java.awt.Color(246, 226, 155));
        comboTipoMeta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tipo de meta", "Ganar calorias", "Disminuir calorias" }));
        comboTipoMeta.setToolTipText("Elige la opcion de tu meta");

        panelGrafica.setBackground(new java.awt.Color(255, 255, 255));
        panelGrafica.setPreferredSize(new java.awt.Dimension(450, 360));

        javax.swing.GroupLayout panelGraficaLayout = new javax.swing.GroupLayout(panelGrafica);
        panelGrafica.setLayout(panelGraficaLayout);
        panelGraficaLayout.setHorizontalGroup(
            panelGraficaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 450, Short.MAX_VALUE)
        );
        panelGraficaLayout.setVerticalGroup(
            panelGraficaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel3.setText("Meta Actual");

        jLabel2.setText("Consumo Calorico");

        graficaBtn.setBackground(new java.awt.Color(253, 140, 13));
        graficaBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/foodtrack/Resources/graficarIcon.png"))); // NOI18N
        graficaBtn.setToolTipText("Gráficar ");
        graficaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graficaBtnActionPerformed(evt);
            }
        });

        nuevaMetaBtn.setBackground(new java.awt.Color(253, 140, 13));
        nuevaMetaBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/foodtrack/Resources/nuevaMetaIcon.png"))); // NOI18N
        nuevaMetaBtn.setToolTipText("Nueva meta ");
        nuevaMetaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevaMetaBtnActionPerformed(evt);
            }
        });

        actualizarMetaBtn.setBackground(new java.awt.Color(253, 140, 13));
        actualizarMetaBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/foodtrack/Resources/actualizarIcon.png"))); // NOI18N
        actualizarMetaBtn.setToolTipText("Actualizar meta ");
        actualizarMetaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarMetaBtnActionPerformed(evt);
            }
        });

        menuPanel.setBackground(new java.awt.Color(253, 140, 13));
        menuPanel.setMaximumSize(new java.awt.Dimension(4, 4));
        menuPanel.setMinimumSize(new java.awt.Dimension(4, 4));
        menuPanel.setPreferredSize(new java.awt.Dimension(130, 25));

        addComidaBtn.setBackground(new java.awt.Color(246, 226, 155));
        addComidaBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/foodtrack/Resources/addComidaIcon.png"))); // NOI18N
        addComidaBtn.setToolTipText("Añadir comida");
        addComidaBtn.setPreferredSize(new java.awt.Dimension(80, 60));
        addComidaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addComidaBtnActionPerformed(evt);
            }
        });

        listaComprasBtn.setBackground(new java.awt.Color(246, 226, 155));
        listaComprasBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/foodtrack/Resources/listaComprasIcon.png"))); // NOI18N
        listaComprasBtn.setToolTipText("Lista de Compras");
        listaComprasBtn.setPreferredSize(new java.awt.Dimension(80, 60));
        listaComprasBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaComprasBtnActionPerformed(evt);
            }
        });

        estadisticasBtn.setBackground(new java.awt.Color(246, 226, 155));
        estadisticasBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/foodtrack/Resources/estadisticasIcon.png"))); // NOI18N
        estadisticasBtn.setToolTipText("Estadísiticas");
        estadisticasBtn.setPreferredSize(new java.awt.Dimension(80, 60));
        estadisticasBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                estadisticasBtnActionPerformed(evt);
            }
        });

        perfilBtn.setBackground(new java.awt.Color(246, 226, 155));
        perfilBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/foodtrack/Resources/perfilIcon.png"))); // NOI18N
        perfilBtn.setToolTipText("Perfil");
        perfilBtn.setPreferredSize(new java.awt.Dimension(80, 60));
        perfilBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                perfilBtnActionPerformed(evt);
            }
        });

        salirBtn.setBackground(new java.awt.Color(246, 226, 155));
        salirBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/foodtrack/Resources/salirIcon.png"))); // NOI18N
        salirBtn.setToolTipText("Salir");
        salirBtn.setMaximumSize(new java.awt.Dimension(50, 30));
        salirBtn.setPreferredSize(new java.awt.Dimension(50, 40));
        salirBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirBtnActionPerformed(evt);
            }
        });

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/foodtrack/Resources/logo_blanco.png"))); // NOI18N
        jLabel12.setText("jLabel1");

        javax.swing.GroupLayout menuPanelLayout = new javax.swing.GroupLayout(menuPanel);
        menuPanel.setLayout(menuPanelLayout);
        menuPanelLayout.setHorizontalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(perfilBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                    .addComponent(estadisticasBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, menuPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(salirBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(listaComprasBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addComidaBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        menuPanelLayout.setVerticalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, menuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addComidaBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listaComprasBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(estadisticasBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(perfilBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 95, Short.MAX_VALUE)
                .addComponent(salirBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(menuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(panelGrafica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(meta_actualInput, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                            .addComponent(consumo_caloricoInput)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboTipoMeta, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(graficaBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(nuevaMetaBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                                .addComponent(actualizarMetaBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(comboTipoMeta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(meta_actualInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(consumo_caloricoInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nuevaMetaBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(actualizarMetaBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(graficaBtn)
                .addGap(21, 21, 21))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(panelGrafica, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                .addGap(87, 87, 87))
            .addComponent(menuPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 832, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
     
    //traer los datos de consumo calorico total
     private void traerDatosMeta (){
        meta_actualInput.setEditable(false);
        consumo_caloricoInput.setEditable(false);
        comboTipoMeta.setEnabled(false);
        LocalDate fecha = LocalDate.now();
        int idUsuario = UsuarioId.getInstance().getValor();
        int idConsumo = PeticionesDB.buscarConsumoCalorico(fecha, idUsuario);
        String total_calorias = String.valueOf(PeticionesDB.traerCaloriasConsumo(idConsumo));
        consumo_caloricoInput.setText(total_calorias);
        int idMeta = PeticionesDB.buscarIdMeta(idUsuario);
        if (idMeta != -1) {
            HashMap<String, Object> datosMeta = PeticionesDB.traerDatosMeta(idMeta);
            comboTipoMeta.setSelectedItem(String.valueOf(datosMeta.get("tipo_meta")));
            meta_actualInput.setText(String.valueOf(datosMeta.get("metaActual")));
            actualizarMetaBtn.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "No existe ninguna meta para el usuario actual", "Aviso", JOptionPane.ERROR_MESSAGE);
            // Hacer los campos editables
            meta_actualInput.setEditable(true);
            comboTipoMeta.setEnabled(true);
            nuevaMetaBtn.setVisible(false);
            actualizarMetaBtn.setVisible(true);
        }
    }






    private void graficaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graficaBtnActionPerformed
        // TODO add your handling code here:
        meta_actualInput.setEditable(true);
        comboTipoMeta.setEnabled(true);
        String metaInput = meta_actualInput.getText().trim();
        String totalCaloriasInput = consumo_caloricoInput.getText().trim();
        
        System.out.println("entro a estadisticas");  
        //System.out.println("marcooo"); //verificar si funciona el evento

        //valida si los campos estan completos y si estan vacios no permitira continuar
        if (metaInput.isEmpty()) {  //verificar si el campo meta actual esta vacio y manda una alerta
           JOptionPane.showMessageDialog(this, "El campo para agregar las calorias de tu meta actual no puede estar vacío", "Error",JOptionPane.ERROR_MESSAGE);
           return;
        }
        try { double numero = Double.parseDouble(metaInput);//verifica si el campo esta completo solo con números 
           // JOptionPane.showMessageDialog(this, "Valor válido: " + numero,  "Éxito", JOptionPane.INFORMATION_MESSAGE);
        }
        catch(NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Solo se permiten valores numéricos en el campo Meta actual", "Error", JOptionPane.ERROR_MESSAGE);
           //tambien tenia un return  
        }


        if (totalCaloriasInput.isEmpty()) {  //verifica si el campo consumo calorico esta vacio y manda una alerta
            JOptionPane.showMessageDialog(this, "️ El campo consumo calorico no puede estar vacío", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }
        try { double numero = Double.parseDouble(totalCaloriasInput);//verifica si el campo esta completo solo con números 
            //JOptionPane.showMessageDialog(this, "Valor válido: " + numero,  "Éxito", JOptionPane.INFORMATION_MESSAGE);
        }
        catch(NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Solo se permiten valores numéricos en el campo Consumo calorico", "Error", JOptionPane.ERROR_MESSAGE);
            //primero no tenia un return y dspues le puse y despues lo quite para comprobar 
        }


        if (comboTipoMeta.getSelectedIndex() <=0){//verifica que se selecciono una opcion del combobox 
            JOptionPane.showMessageDialog(this, "️No se a seleccionado el tipo de meta", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return; 
        }

        //panelGrafica es el nombre del panel donde se colocara la grafica 
         panelGrafica.removeAll(); // nos ayuda para eliminar la grafica que se encontraba anteriormente 
        //nos ayuda para actualizar la grafica si se cambian los valores sin tener que cerrar la ventana 

        // es una condicion se se selecciona de garar calorias se ejecutara una grafica 
        if (comboTipoMeta.getSelectedIndex()==1){ 
            //System.out.println("se seleccionar GANAR PESO");


           comboTipoMeta.setEnabled(true);//evita que cambie de meta cuando ya la selecciono hasta completar la meta que se propuso
           meta_actualInput.setEnabled(true);
           //consumo_caloricoInput.setEnabled(false); 

            //definir las variables
           double metaG = Double.parseDouble(metaInput); //los datos obtenidos se convierten a tipo double 
            //int metaG = Integer.parseInt(meta_actualInput.getText());
           double caloriasTotales = Double.parseDouble(totalCaloriasInput);
            //int caloriasTotales = Integer.parseInt(consumo_caloricoInput.getText()); 

            DefaultPieDataset datos = new DefaultPieDataset(); //nos ayuda para definir los datos que se van a ocupar para la grafica
            double porcentajeCompleto =Math.min(100, (caloriasTotales/metaG)*100);
            //datos.setValue("Tu meta "  ,metaG);         //se definen las categorias
            //datos.setValue("Calorias consumidas",caloriasTotales);
            datos.setValue("Progreso calorias consumidas (" + porcentajeCompleto + "%)", porcentajeCompleto);

            if (porcentajeCompleto < 100) {
                datos.setValue("Restante (" + (100 - porcentajeCompleto) + "%)", 
                             100 - porcentajeCompleto);
            } 

            //crear grafico y asignar argumentos
            JFreeChart grafico_circular = ChartFactory.createPieChart( //se utiliza para crear la grafica con JFreeChart
            "Meta de Aumento de Calorias: Meta"+metaG +"cal",  //nombre de la grafica 
            datos, //datos que se necesitan  
            true,// nombre de categorias
            true,//herramientas 
            false //no ocupamos URL
            );

            PiePlot plot = (PiePlot) grafico_circular.getPlot();  //Asignar colores a la grafica  
            //plot.setSectionPaint("Tu meta", new Color(253, 140,13)); //a la meta color naranja
            //plot.setSectionPaint("Calorias consumidas", Color.GREEN); //a las calorias consumisas amarillo
            plot.setSectionPaint("Progreso calorias consumidas("+porcentajeCompleto + "%)", Color.BLUE);
            plot.setSimpleLabels(true);

             if (porcentajeCompleto < 100) {
                plot.setSectionPaint("Restante de meta (" + (100 - porcentajeCompleto) + "%)", 
                                   new Color(240, 240, 240)); // Gris claro
            }

            ChartPanel panel = new ChartPanel(grafico_circular);//se crea el panel en donde estara la grafica 
            panel.setMouseWheelEnabled(true);//se puede mover el grafico 
            panel.setPreferredSize(new Dimension(450,360));//dimensiones 

            panelGrafica.setLayout(new BorderLayout());     //para la creasion del la parte del panel
            panelGrafica.add(panel,BorderLayout.NORTH);  

            //ultimamente agrege esos dos 
            panelGrafica.revalidate();
            panelGrafica.repaint();


            pack(); //ejecutar grafico
            repaint(); // mostrar el grafico 


             if (caloriasTotales >= metaG ){
            JOptionPane.showMessageDialog(this, "️Alcansaste tu meta, y sobrepasaste la meta con: "+(caloriasTotales-metaG)+"cal", "Advertencia", JOptionPane.WARNING_MESSAGE);


            nuevaMetaBtn.setVisible(true);// el boton se hace visible cuando se cumple la sentencia para una nueva meta

            }
        } 
        else{// de lo contrario si se selecciona la opcion de perder calorias se ejecutara otra grafica 
            System.out.println("se selecciono la opcion de perder peso ");
        comboTipoMeta.setEnabled(false);//evita que cambie de meta cuando ya la selecciono hasta completar la meta que se propuso   
        meta_actualInput.setEnabled(false);
        //consumo_caloricoInput.setEnabled(false);   

         double metaP = Double.parseDouble(metaInput);//los datos obtenidos se convierten a tipo double 
         //int metaP = Integer.parseInt(meta_actualInput.getText());
         double caloriasTotales = Double.parseDouble(totalCaloriasInput);
         //int caloriasTotales = Integer.parseInt(consumo_caloricoInput.getText()); 

            DefaultPieDataset datos = new DefaultPieDataset();//nos ayuda para definir los datos que se van a ocupar para la grafica
            double porcentajeCompleto =Math.min(100, (caloriasTotales/metaP)*100);
            //datos.setValue("Tu meta "  ,metaP);      //se definen las categorias
            //datos.setValue("Total de calorias consumidas",caloriasTotales);
            datos.setValue("Progreso Calorias consumidas (" + porcentajeCompleto + "%)", porcentajeCompleto);


            //crear grafico y asignar argumentos
            JFreeChart grafico_circular = ChartFactory.createPieChart(//se utiliza para crear la grafica con JFreeChart
            "Meta de Disminuir de Calorias: Meta"+ metaP+"cal", //nombre de la grafica 
            datos,//datos que se necesitan  
            true,// nombre de categorias
            true,//herramientas 
            false//no ocupamos URL
            );

            PiePlot plot = (PiePlot) grafico_circular.getPlot();//asignar colores a la grafica 
           // plot.setSectionPaint("Tu meta", Color.PINK); // a la meta rosa
            //plot.setSectionPaint("Calorias consumidas", Color.BLUE); //a las calorias amarillo
            plot.setSectionPaint("Progreso calorias consumidas("+porcentajeCompleto + "%)", Color.BLUE);
            plot.setSimpleLabels(true);

             if (porcentajeCompleto < 100) {
                datos.setValue("Restante de meta (" + (100 - porcentajeCompleto) + "%)", 
                             100 - porcentajeCompleto);
            }

            ChartPanel panel = new ChartPanel(grafico_circular);//se crea el panel en donde estara la grafica 
            panel.setMouseWheelEnabled(true);//se puede mover el grafico 
            panel.setPreferredSize(new Dimension(450,360));//dimensiones 

            panelGrafica.setLayout(new BorderLayout());//para la creasion del la parte del panel
            panelGrafica.add(panel,BorderLayout.NORTH);

            panelGrafica.revalidate();//ultimamente agrege esos dos
            panelGrafica.repaint();


            //para ejecutar y mostrar grafico 
            pack();
            repaint();

            if (caloriasTotales >= metaP ){
            JOptionPane.showMessageDialog(this, "️Alcansaste tu meta, y sobrepasaste la meta con: "+(metaP-caloriasTotales), "Advertencia", JOptionPane.WARNING_MESSAGE);


            nuevaMetaBtn.setVisible(true);// el boton se hace visible cuando se cumple la sentencia para una nueva meta

            }
    }
        
        
    }//GEN-LAST:event_graficaBtnActionPerformed

    private void nuevaMetaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevaMetaBtnActionPerformed
        // TODO add your handling code here:
        //Borrar meta en base de datos
        int idUsuario = UsuarioId.getInstance().getValor();
        int idMeta = PeticionesDB.buscarIdMeta(idUsuario);
        int borrarMeta = PeticionesDB.borrarMeta(idMeta);
        if (borrarMeta != -1) {
            JOptionPane.showMessageDialog(this, "Meta borrada exitosamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            traerDatosMeta();
        } else {
            JOptionPane.showMessageDialog(this, "La meta no se pudo borrar", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        // Limpiar los campos
        meta_actualInput.setText("");
        consumo_caloricoInput.setText("");
        comboTipoMeta.setSelectedIndex(0);
        
        // Hacer los campos editables
        meta_actualInput.setEditable(true);
        comboTipoMeta.setEnabled(true);
        nuevaMetaBtn.setVisible(false);
        actualizarMetaBtn.setVisible(true);

        // Limpiar el gráfico
        panelGrafica.removeAll();
        panelGrafica.revalidate();
        panelGrafica.repaint();
 
    }//GEN-LAST:event_nuevaMetaBtnActionPerformed

    private void actualizarMetaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarMetaBtnActionPerformed
        // TODO add your handling code here:
        //Validación de campos
        String metaInput = meta_actualInput.getText().trim();
        if (metaInput.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El campo meta no puede estar vacío", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            Integer.valueOf(metaInput);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "La meta debe ser un número válido", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (comboTipoMeta.getSelectedIndex() <= 0) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un tipo de meta", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        //Obtener datos
        LocalDate fecha = LocalDate.now();
        int idUsuario = UsuarioId.getInstance().getValor();
        String tipoMeta = comboTipoMeta.getSelectedItem().toString();
        int metaInp = Integer.parseInt(metaInput);
        int idConsumo = PeticionesDB.buscarConsumoCalorico(fecha, idUsuario);
        int idMeta = PeticionesDB.buscarIdMeta(idUsuario);

        //se guarda en la base de datos en el campo de 
        if (idMeta != -1) {
            boolean metaActualizada = PeticionesDB.actualizarMeta(idUsuario, idConsumo, tipoMeta, metaInp);

            if (metaActualizada) {
                JOptionPane.showMessageDialog(this, "Meta actualizada con éxito", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                traerDatosMeta();
                actualizarMetaBtn.setVisible(false);
            } else {
                JOptionPane.showMessageDialog(this, "Error al registrar los datos de la meta", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            boolean crearMeta = PeticionesDB.crearMeta(idUsuario, idConsumo, tipoMeta, metaInp);

            if (crearMeta) {
                JOptionPane.showMessageDialog(this, "Meta creada con éxito", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                traerDatosMeta();
                actualizarMetaBtn.setVisible(false);
            } else {
                JOptionPane.showMessageDialog(this, "Error al registrar los datos de la meta", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        //Volver a bloquear la edición de los equipos
        meta_actualInput.setEditable(false);
        consumo_caloricoInput.setEditable(false);
        comboTipoMeta.setEnabled(false);
    }//GEN-LAST:event_actualizarMetaBtnActionPerformed

    private void addComidaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addComidaBtnActionPerformed
        AddComida miAddComida = new AddComida();
        miAddComida.setVisible(true);
        dispose();

        // TODO add your handling code here:
    }//GEN-LAST:event_addComidaBtnActionPerformed

    private void listaComprasBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaComprasBtnActionPerformed
        // TODO add your handling code here:
        ListaCompras miListaCompras = new ListaCompras();
        miListaCompras.setVisible(true);
        dispose();
    }//GEN-LAST:event_listaComprasBtnActionPerformed

    private void estadisticasBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_estadisticasBtnActionPerformed
        // TODO add your handling code here:
        Estadisticas miEstadisticas= new Estadisticas();
        miEstadisticas.setVisible(true);
        dispose();
    }//GEN-LAST:event_estadisticasBtnActionPerformed

    private void perfilBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_perfilBtnActionPerformed
        // TODO add your handling code here:
        Perfil miPerfil = new Perfil();
        miPerfil.setVisible(true);
        dispose();
    }//GEN-LAST:event_perfilBtnActionPerformed

    private void salirBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirBtnActionPerformed
        // TODO add your handling code here:
        dispose();
        DataBase.desconectar();
    }//GEN-LAST:event_salirBtnActionPerformed

    private void checarApariencia() {
        if (ModoOscuro.getInstance().isModoOscuroActivo()) {
            //Cambiar menú
            menuPanel.setBackground(ModoOscuro.getInstance().getColorFuerteOscuro());
            addComidaBtn.setBackground(ModoOscuro.getInstance().getBotonesOscuro());
            addComidaBtn.setForeground(ModoOscuro.getInstance().getFuenteOscuro());
            listaComprasBtn.setBackground(ModoOscuro.getInstance().getBotonesOscuro());
            listaComprasBtn.setForeground(ModoOscuro.getInstance().getFuenteOscuro());
            estadisticasBtn.setBackground(ModoOscuro.getInstance().getBotonesOscuro());
            estadisticasBtn.setForeground(ModoOscuro.getInstance().getFuenteOscuro());
            perfilBtn.setBackground(ModoOscuro.getInstance().getBotonesOscuro());
            perfilBtn.setForeground(ModoOscuro.getInstance().getFuenteOscuro());
            salirBtn.setBackground(ModoOscuro.getInstance().getBotonesOscuro());
            salirBtn.setForeground(ModoOscuro.getInstance().getFuenteOscuro());
            
            //Cambiar panel
            jPanel1.setBackground(ModoOscuro.getInstance().getFondoOscuro());
            
            //Cambiar labels
            jLabel3.setForeground(ModoOscuro.getInstance().getFuenteOscuro());
            jLabel2.setForeground(ModoOscuro.getInstance().getFuenteOscuro());
            
            //Cambiar botones y combo box
            graficaBtn.setBackground(ModoOscuro.getInstance().getColorFuerteOscuro());
            graficaBtn.setForeground(ModoOscuro.getInstance().getFuenteOscuro());
            comboTipoMeta.setBackground(ModoOscuro.getInstance().getBotonesOscuro());
            comboTipoMeta.setForeground(ModoOscuro.getInstance().getFuenteOscuro());
            nuevaMetaBtn.setBackground(ModoOscuro.getInstance().getColorFuerteOscuro());
            nuevaMetaBtn.setForeground(ModoOscuro.getInstance().getFuenteOscuro());
            actualizarMetaBtn.setBackground(ModoOscuro.getInstance().getColorFuerteOscuro());
            actualizarMetaBtn.setForeground(ModoOscuro.getInstance().getFuenteOscuro());
        } else {
            //Cambiar menú
            menuPanel.setBackground(ModoOscuro.getInstance().getColorFuerteClaro());
            addComidaBtn.setBackground(ModoOscuro.getInstance().getBotonesClaro());
            addComidaBtn.setForeground(ModoOscuro.getInstance().getFuenteClaro());
            listaComprasBtn.setBackground(ModoOscuro.getInstance().getBotonesClaro());
            listaComprasBtn.setForeground(ModoOscuro.getInstance().getFuenteClaro());
            estadisticasBtn.setBackground(ModoOscuro.getInstance().getBotonesClaro());
            estadisticasBtn.setForeground(ModoOscuro.getInstance().getFuenteClaro());
            perfilBtn.setBackground(ModoOscuro.getInstance().getBotonesClaro());
            perfilBtn.setForeground(ModoOscuro.getInstance().getFuenteClaro());
            salirBtn.setBackground(ModoOscuro.getInstance().getBotonesClaro());
            salirBtn.setForeground(ModoOscuro.getInstance().getFuenteClaro());

            //Cambiar panel
            jPanel1.setBackground(ModoOscuro.getInstance().getFondoClaro());

            //Cambiar labels
            jLabel3.setForeground(ModoOscuro.getInstance().getFuenteClaro());
            jLabel2.setForeground(ModoOscuro.getInstance().getFuenteClaro());

            //Cambiar botones y combo box
            graficaBtn.setBackground(ModoOscuro.getInstance().getColorFuerteClaro());
            graficaBtn.setForeground(ModoOscuro.getInstance().getFuenteClaro());
            comboTipoMeta.setBackground(ModoOscuro.getInstance().getBotonesClaro());
            comboTipoMeta.setForeground(ModoOscuro.getInstance().getFuenteClaro());
            nuevaMetaBtn.setBackground(ModoOscuro.getInstance().getColorFuerteClaro());
            nuevaMetaBtn.setForeground(ModoOscuro.getInstance().getFuenteClaro());
        }
    }
       
    
    
    
    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actualizarMetaBtn;
    private javax.swing.JButton addComidaBtn;
    private javax.swing.JComboBox<String> comboTipoMeta;
    private javax.swing.JTextField consumo_caloricoInput;
    private javax.swing.JButton estadisticasBtn;
    private javax.swing.JButton graficaBtn;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton listaComprasBtn;
    private javax.swing.JPanel menuPanel;
    private javax.swing.JTextField meta_actualInput;
    private javax.swing.JButton nuevaMetaBtn;
    private javax.swing.JPanel panelGrafica;
    private javax.swing.JButton perfilBtn;
    private javax.swing.JButton salirBtn;
    // End of variables declaration//GEN-END:variables
}
